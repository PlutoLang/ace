/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from Pluto.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var PlutoHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#pluto"
        }],
        "#pluto": [{
            token: [
                "storage.type.function.pluto",
                "meta.function.pluto",
                "meta.function.pluto",
                "punctuation.separator.parameter.pluto",
                "entity.name.function.pluto",
                "meta.function.pluto",
                "punctuation.section.group.begin.pluto"
            ],
            regex: /\b(function)(?:(\s+)(?:([a-zA-Z_][a-zA-Z0-9_]*)([.:]))?([a-zA-Z_][a-zA-Z0-9_]*))?(\s*)(\()/,
            push: [{
                token: [
                    "punctuation.section.group.end.pluto",
                    "punctuation.separator.colon.pluto",
                    "meta.function.pluto",
                    "storage.type.primitive.pluto",
                    "storage.type.attribute.pluto"
                ],
                regex: /(\))(?:(:)(\s+)(void|\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata)\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata)\??))?((?:\s*<nodiscard>)?)/,
                next: "pop"
            }, {
                include: "#block-comment"
            }, {
                token: "storage.modifier.access.pluto",
                regex: /\b(?:public|private|protected)\s/
            }, {
                token: "variable.parameter.function.pluto",
                regex: /[a-zA-Z_][a-zA-Z0-9_]*/
            }, {
                token: "punctuation.separator.comma.pluto",
                regex: /,/
            }, {
                token: "constant.language.pluto",
                regex: /\.\.\./
            }, {
                token: [
                    "punctuation.separator.colon.pluto",
                    "meta.typehint.pluto",
                    "storage.type.primitive.pluto"
                ],
                regex: /(:)(\s+)(\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata)\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata)\??)/
            }, {
                token: "keyword.operator.assignment.pluto",
                regex: /=/,
                push: [{
                    token: "meta.default-arguments.pluto",
                    regex: /(?=[,\)])/,
                    next: "pop"
                }, {
                    include: "#pluto"
                }, {
                    defaultToken: "meta.default-arguments.pluto"
                }]
            }, {
                defaultToken: "meta.function.pluto"
            }]
        }, {
            token: [
                "storage.modifier.function.preprocessoralias.pluto",
                "meta.preprocessoralias.pluto",
                "meta.preprocessoralias.pluto",
                "punctuation.separator.parameter.pluto",
                "entity.name.function.preprocessoralias.pluto",
                "meta.preprocessoralias.pluto",
                "punctuation.section.group.begin.pluto"
            ],
            regex: /(\$alias)(?:(\s+)(?:([a-zA-Z_][a-zA-Z0-9_]*)([.:]))?([a-zA-Z_][a-zA-Z0-9_]*))?(\s*)(\()/,
            push: [{
                token: "punctuation.section.group.end.pluto",
                regex: /\)/,
                next: "pop"
            }, {
                token: "variable.parameter.preprocessoralias.pluto",
                regex: /[a-zA-Z_][a-zA-Z0-9_]*/
            }, {
                token: "punctuation.separator.comma.pluto",
                regex: /,/
            }, {
                defaultToken: "meta.preprocessoralias.pluto"
            }]
        }, {
            token: [
                "storage.type.function.pluto",
                "punctuation.separator.parameter.pluto",
                "meta.function.incomplete.pluto",
                "entity.name.function.pluto",
                "meta.function.incomplete.pluto"
            ],
            regex: /\b(function)($|\s+)(?:([a-zA-Z_][a-zA-Z0-9_]*)([.:]))?((?:[a-zA-Z_][a-zA-Z0-9_]*)?)/
        }, {
            token: "punctuation.section.group.begin.pluto",
            regex: /\|(?=[a-zA-Z0-9_,\s]*\|\s*->)/,
            push: [{
                token: [
                    "punctuation.section.group.end.pluto",
                    "text",
                    "storage.type.function.arrow.pluto"
                ],
                regex: /(\|)(\s*)(->)/,
                next: "pop"
            }, {
                token: "variable.parameter.function.pluto",
                regex: /[a-zA-Z_][a-zA-Z0-9_]*/
            }, {
                token: "punctuation.separator.comma.pluto",
                regex: /,/
            }]
        }, {
            include: "#simpleexp"
        }, {
            token: "punctuation.section.group.begin.pluto",
            regex: /\(/
        }, {
            token: "punctuation.section.group.end.pluto",
            regex: /\)/
        }, {
            token: [
                "text",
                "punctuation.definition.string.begin.pluto"
            ],
            regex: /(?<=[\.\:]cdef|ffi\.struct)(\s*)(\[=*\[)/,
            push: [{
                token: "punctuation.definition.string.end.pluto",
                regex: /\]=*\]/,
                next: "pop"
            }, {
                include: "source.c"
            }, {
                defaultToken: "meta.embedded.pluto"
            }]
        }, {
            token: "punctuation.definition.string.begin.pluto",
            regex: /(?<!--)\[=*\[/,
            push: [{
                token: "punctuation.definition.string.end.pluto",
                regex: /\]=*\]/,
                next: "pop"
            }, {
                defaultToken: "string.quoted.other.multiline.pluto"
            }]
        }, {
            token: [
                "punctuation.definition.comment.pluto",
                "comment.line.shebang.pluto"
            ],
            regex: /\A(#!)(.*$)/
        }, {
            include: "#block-comment"
        }, {
            token: "punctuation.definition.comment.pluto",
            regex: /-->?/,
            push: [{
                token: "comment.line.double-dash.pluto",
                regex: /$/,
                next: "pop"
            }, {
                include: "#annotations"
            }, {
                defaultToken: "comment.line.double-dash.pluto"
            }]
        }, {
            token: [
                "keyword.control.goto.pluto",
                "meta.goto.pluto",
                "meta.goto.pluto"
            ],
            regex: /\b(goto)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)/
        }, {
            token: [
                "punctuation.definition.label.begin.pluto",
                "meta.goto-label.pluto",
                "punctuation.definition.label.end.pluto"
            ],
            regex: /(::)([a-zA-Z_][a-zA-Z0-9_]*)(::)/
        }, {
            token: "keyword.operator.nullcoal.pluto",
            regex: /\?\?/
        }, {
            token: "punctuation.accessor.pluto",
            regex: /\?\./
        }, {
            token: [
                "punctuation.accessor.pluto",
                "meta.safe-navigation-array.pluto"
            ],
            regex: /(\?)(\[)/
        }, {
            token: [
                "keyword.operator.pipe.pluto",
                "text",
                "text",
                "punctuation.separator.colon.pluto",
                "support.function.any-method.pluto"
            ],
            regex: /(\|>)(\s*)(?:([a-zA-Z_][a-zA-Z0-9_]*)([.:]))?([a-zA-Z_][a-zA-Z0-9_]*)/
        }, {
            token: "storage.type.attribute.pluto",
            regex: /<(?:const|close)>/
        }, {
            token: "storage.modifier.pluto",
            regex: /\$(?:define|alias)\b/
        }, {
            token: "keyword.operator.logical.pluto",
            regex: /\+|-|%|#|\*|\/|\^|==|~=|!=|<=?|>=?|(?<!\.)\.{2}(?!\.)|\$|\||~|&/
        }, {
            token: "keyword.operator.assignment.pluto",
            regex: /\:?=|->/
        }, {
            token: "keyword.operator.ternary.pluto",
            regex: /\?(?![:(])/
        }, {
            token: "keyword.operator.ternary.pluto",
            regex: /(?<=\s)\:(?!\w)/
        }, {
            token: [
                "storage.type.class.pluto",
                "meta.class.pluto",
                "meta.class.pluto",
                "punctuation.separator.parameter.pluto",
                "entity.name.type.class.pluto"
            ],
            regex: /\b((?<![.:])(?:pluto_)?class)(\s+)(?!begin)(?!end)(?:([a-zA-Z_][a-zA-Z0-9_]*)(\.))?((?:[a-zA-Z_][a-zA-Z0-9_]*)?)/,
            push: [{
                token: "keyword.control.pluto",
                regex: /\bend\b/,
                next: "pop"
            }, {
                token: "storage.modifier.access.pluto",
                regex: /\b(?:public|private|protected)\b/,
                push: [{
                    token: "text",
                    regex: /\w+/,
                    next: "pop"
                }]
            }, {
                token: [
                    "punctuation.separator.colon.pluto",
                    "meta.typehint.pluto",
                    "storage.type.primitive.pluto"
                ],
                regex: /(:)(\s+)(\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata)\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata)\??)/
            }, {
                include: "#pluto"
            }, {
                defaultToken: "meta.class.pluto"
            }]
        }, {
            token: [
                "storage.type.enum.pluto",
                "meta.enum.pluto",
                "keyword.control.pluto",
                "meta.enum.pluto",
                "entity.name.type.enum.pluto",
                "meta.enum.pluto",
                "keyword.control.pluto"
            ],
            regex: /\b((?:pluto_)?enum\b(?:\s+class)?)(?:(\s+)(begin|do)|(\s+)((?:[a-zA-Z_][a-zA-Z0-9_]*)?)(?:(\s+)(begin|do))?)?/
        }, {
            token: [
                "storage.modifier.extends.pluto",
                "meta.extends.pluto",
                "meta.extends.pluto",
                "punctuation.separator.parameter.pluto",
                "entity.other.inherited-class.pluto"
            ],
            regex: /\b(extends)(\s+)(?:([a-zA-Z_][a-zA-Z0-9_]*)(\.))?((?:[a-zA-Z_][a-zA-Z0-9_]*)?)/
        }, {
            token: [
                "keyword.control.pluto",
                "meta.classoperator.pluto",
                "meta.classoperator.pluto",
                "punctuation.separator.parameter.pluto",
                "support.class.pluto"
            ],
            regex: /\b(?<![.:])(new|pluto_new|instanceof)(\s+)(?:([a-zA-Z_][a-zA-Z0-9_]*)(\.))?((?:[a-zA-Z_][a-zA-Z0-9_]*)?)/
        }, {
            token: "keyword.control.pluto",
            regex: /\b(?<![.:])(?:break|continue|do|else|for|if|elseif|goto|return|switch|pluto_switch|then|repeat|while|until|end|in|as|case|default|begin|pluto_use|pluto_try|pluto_catch|try|catch)\b/
        }, {
            token: [
                "storage.modifier.pluto",
                "text",
                "invalid.name.reserved.not-narrow.not-overridable.not-optional.not-special.pluto",
                "text",
                "text",
                "punctuation.separator.colon.pluto",
                "text",
                "storage.type.primitive.pluto"
            ],
            regex: /\b(?<!\.)(local|global)(\s+)(?!class)(?!pluto_class)(?!function)(?:(and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|pluto_use|pluto_switch|pluto_continue|pluto_enum|pluto_new|pluto_class|pluto_export|pluto_try|pluto_catch|switch|continue|enum|new|class|export|try|catch|return|then|true|until|while)\b|(\w+))(?:(\s*)(:)(\s+)(\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata)\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata)\??))?/
        }, {
            token: "storage.modifier.pluto",
            regex: /\b(?<![.\:])(?:local|global|export|pluto_export)\b/
        }, {
            token: "storage.modifier.pluto",
            regex: /\b(?<![.\:])static(?!\s*\()\b/
        }, {
            token: "constant.language.pluto",
            regex: /(?<![^.]\.|:)\b(?:false|nil|true)\b|(?<![.])\.\.\.(?!\.)/
        }, {
            token: "constant.language.pluto support.constant.builtin.pluto",
            regex: /(?<![^.]\.|:)\b(?:_G|_VERSION|_PVERSION|math\.(?:pi|huge|mininteger|maxinteger)|os\.(?:platform|arch)|json\.(?:null|withnull|withorder))\b/
        }, {
            token: "variable.language.self.pluto",
            regex: /(?<![^.]\.|:)\bself\b/
        }, {
            token: "variable.language.parent.pluto",
            regex: /(?<![^.]\.|:)\b(?:pluto_)?parent\b/
        }, {
            token: "support.function.pluto",
            regex: /(?<![^.]\.|:)\b(?:assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\b(?=\s*(?:[({"']|\[\[))/
        }, {
            token: "support.function.library.pluto",
            regex: /\b(?<!(?<!\.)\.)(?<!:)(?:coroutine|package|string|utf8|table|math|io|os|debug)\b/
        }, {
            token: "keyword.operator.logical.pluto",
            regex: /\b(?:and|or|not)\b/
        }, {
            token: "keyword.operator.logical.pluto",
            regex: /!/
        }, {
            token: "support.function.any-method.pluto",
            regex: /\b[a-zA-Z_][a-zA-Z0-9_]*\b(?=\s*(?:[({"']|\$["']|\[\[))/
        }, {
            token: "variable.other.pluto",
            regex: /(?<=[^.]\.|:)\b[a-zA-Z_][a-zA-Z0-9_]*/
        }, {
            token: "punctuation.accessor.pluto",
            regex: /\.\b/
        }, {
            token: [
                "punctuation.accessor.pluto",
                "support.function.pluto",
                "punctuation.accessor.pluto"
            ],
            regex: /\b(\??:)([a-zA-Z0-9_]+)(\??)/
        }, {
            token: "punctuation.separator.colon.pluto",
            regex: /:/
        }, {
            token: "punctuation.separator.comma.pluto",
            regex: /,/
        }, {
            token: "punctuation.terminator.pluto",
            regex: /;/
        }, {
            token: "punctuation.section.destructuring.begin.pluto",
            regex: /\[/,
            push: [{
                token: "punctuation.section.destructuring.end.pluto",
                regex: /\]/,
                next: "pop"
            }, {
                include: "#pluto"
            }, {
                defaultToken: "meta.destructuring.pluto"
            }]
        }],
        "#block-comment": [{
            token: "punctuation.definition.comment.begin.pluto",
            regex: /--\[=*\[/,
            push: [{
                token: "punctuation.definition.comment.end.pluto",
                regex: /\]=*\]/,
                next: "pop"
            }, {
                include: "#annotations"
            }, {
                defaultToken: "comment.block.pluto"
            }]
        }],
        "#simpleexp": [{
            token: "constant.numeric.float.hexadecimal.pluto",
            regex: /(?<![\w\d])0[xX][0-9A-Fa-f][0-9A-Fa-f_]*(?:\.[0-9A-Fa-f]+)?(?:[eE]-?\d*)?(?:[pP][-+]\d+)?/
        }, {
            token: "constant.numeric.integer.hexadecimal.pluto",
            regex: /(?<![\w\d])0[xX][0-9A-Fa-f][0-9A-Fa-f_]*(?![pPeE.0-9])/
        }, {
            token: "constant.numeric.integer.binary.pluto",
            regex: /0[bB][01][01_]*/
        }, {
            token: "constant.numeric.integer.octal.pluto",
            regex: /0[oO][0-7][0-7_]*/
        }, {
            token: "constant.numeric.integer.pluto",
            regex: /(?<![\w\d])\d[0-9_]*(?![pPeE.0-9])/
        }, {
            token: "constant.numeric.float.pluto",
            regex: /(?<![\w\d])\d+(?:\.\d+)?(?:[eE]-?\d*)?/
        }, {
            token: "string.quoted.single.pluto punctuation.definition.string.begin.pluto",
            regex: /'/,
            push: [{
                token: "string.quoted.single.pluto punctuation.definition.string.end.pluto",
                regex: /'/,
                next: "pop"
            }, {
                token: "invalid.multiline-quoted-string.pluto",
                regex: /(?<!\\z)$/,
                push: [{
                    token: "invalid.multiline-quoted-string.pluto",
                    regex: /(?=')/,
                    next: "pop"
                }, {
                    include: "#pluto"
                }, {
                    defaultToken: "invalid.multiline-quoted-string.pluto"
                }]
            }, {
                include: "#string_inner"
            }, {
                defaultToken: "string.quoted.single.pluto"
            }]
        }, {
            token: "string.quoted.double.pluto punctuation.definition.string.begin.pluto",
            regex: /"/,
            push: [{
                token: "string.quoted.double.pluto punctuation.definition.string.end.pluto",
                regex: /"/,
                next: "pop"
            }, {
                token: "invalid.multiline-quoted-string.pluto",
                regex: /(?<!\\z)$/,
                push: [{
                    token: "invalid.multiline-quoted-string.pluto",
                    regex: /(?=")/,
                    next: "pop"
                }, {
                    include: "#pluto"
                }, {
                    defaultToken: "invalid.multiline-quoted-string.pluto"
                }]
            }, {
                include: "#string_inner"
            }, {
                defaultToken: "string.quoted.double.pluto"
            }]
        }, {
            token: [
                "keyword.operator.pluto",
                "string.quoted.single.pluto punctuation.definition.string.begin.pluto"
            ],
            regex: /(\$)(')/,
            push: [{
                token: "punctuation.definition.string.end.pluto string.pluto",
                regex: /'/,
                next: "pop"
            }, {
                token: "invalid.multiline-quoted-string.pluto",
                regex: /$/,
                push: [{
                    token: "invalid.multiline-quoted-string.pluto",
                    regex: /(?=')/,
                    next: "pop"
                }, {
                    include: "#pluto"
                }, {
                    defaultToken: "invalid.multiline-quoted-string.pluto"
                }]
            }, {
                include: "#string_inner"
            }, {
                include: "#string_interpolation"
            }, {
                token: "string.quoted.single.pluto",
                regex: /[^']/
            }, {
                defaultToken: "meta.string.quoted.single.interpolation.pluto"
            }]
        }, {
            token: [
                "keyword.operator.pluto",
                "string.quoted.double.pluto punctuation.definition.string.begin.pluto"
            ],
            regex: /(\$)(")/,
            push: [{
                token: "string.pluto punctuation.definition.string.end.pluto",
                regex: /"/,
                next: "pop"
            }, {
                token: "invalid.multiline-quoted-string.pluto",
                regex: /$/,
                push: [{
                    token: "invalid.multiline-quoted-string.pluto",
                    regex: /(?=")/,
                    next: "pop"
                }, {
                    include: "#pluto"
                }, {
                    defaultToken: "invalid.multiline-quoted-string.pluto"
                }]
            }, {
                include: "#string_inner"
            }, {
                include: "#string_interpolation"
            }, {
                token: "string.quoted.double.pluto",
                regex: /[^"]/
            }, {
                defaultToken: "meta.string.quoted.double.interpolation.pluto"
            }]
        }, {
            token: "punctuation.section.table.begin.pluto",
            regex: /\{/,
            push: [{
                token: "punctuation.section.table.end.pluto",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#pluto"
            }, {
                defaultToken: "meta.table.pluto"
            }]
        }],
        "#string_inner": [{
            token: "constant.character.escape.pluto",
            regex: /\\[abfnrtvz\\"'$]/
        }, {
            token: "constant.character.escape.byte.pluto",
            regex: /\\\d{1,3}/
        }, {
            token: "constant.character.escape.byte.pluto",
            regex: /\\x[0-9A-Fa-f][0-9A-Fa-f]/
        }, {
            token: "constant.character.escape.unicode.pluto",
            regex: /\\u\{[0-9A-Fa-f]+\}/
        }, {
            token: "constant.character.escape.interpolate.pluto",
            regex: /\\{/
        }, {
            token: "invalid.illegal.character.escape.pluto",
            regex: /\\./
        }],
        "#string_interpolation": [{
            token: "punctuation.section.interpolation.begin.pluto",
            regex: /\{/,
            push: [{
                token: "punctuation.section.interpolation.end.pluto",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#pluto"
            }, {
                defaultToken: "meta.interpolation.pluto"
            }]
        }],
        "#annotations": [{
            token: "entity.name.tag.documentation.pluto",
            regex: /\@(?:param|see|comment|usage|return|field|author|set|class|name|pragma|alias|copyright|summary|description|release|license|fixme|todo|warning|raise|charset|within|local|export|private|constructor|static|include|module|script|example|topic|submodule|classmod|file|function|lfunction|table|section|type|annotation|factory|pluto_warnings|pluto_use|fallthrough)/
        }]
    }
    
    this.normalizeRules();
};

PlutoHighlightRules.metaData = {
    fileTypes: ["pluto", "lua"],
    firstLineMatch: "\\A#!.*?\\bpluto(\\d+(\\.\\d+)?)?\\b|\\A--\\s+-\\*-\\s*pluto\\s*-\\*-|pluto_use",
    name: "Pluto",
    scopeName: "source.pluto"
}


oop.inherits(PlutoHighlightRules, TextHighlightRules);

exports.PlutoHighlightRules = PlutoHighlightRules;